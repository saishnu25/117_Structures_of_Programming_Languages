local Append L1 L2 Out Reverse Out1 in 

   // Append function on p 133 (modified for hoz)
   fun {Append Ls Ms}
      case Ls 
      of nil then Ms
      [] '|'(1:X 2:Lr) then (X|{Append Lr Ms})
      end
   end

   L1 = (1|(2|(3|nil)))
   L2 = (4|(5|(6|nil)))

   Out = {Append L1 L2}
   skip Browse Out
   skip Full

   // O(n^2) Reverse function on p 135 (modified for hoz):
   fun {Reverse Xs}
      case Xs
      of nil then nil
      [] '|'(1:X 2:Xr) then
         {Append {Reverse Xr} [X]}
      end
   end

   Out1 = {Reverse L1}
   skip Browse Out1
   skip Full
end


/*

** Output from append.txt **

(Before Reverse)

Out : [ 1  2  3  4  5  6 ]

Store : ((37, 39, 35, 31, 27, 10), '|'(1:20 2:21)),
((38, 19), nil()),
((36, 18), 3),
((34, 17), '|'(1:18 2:19)),
((32, 16), 2),
((33), '|'(1:36 2:37)),
((30, 15), '|'(1:16 2:17)),
((28, 14), 1),
((29), '|'(1:32 2:33)),
((26, 9), '|'(1:14 2:15)),
((24), 6),
((25), nil()),
((22), 5),
((23), '|'(1:24 2:25)),
((20), 4),
((21), '|'(1:22 2:23)),
((8), proc(["Ls","Ms","EXU1"],[case Ls of nil() then [EXU1 = Ms] else [case Ls of '|'(1:X 2:Lr) then [local ["EXU2","EXU3"] [EXU2 = X,local ["EXU4","EXU5"] [EXU4 = Lr,EXU5 = Ms,"Append" "EXU4" "EXU5" "EXU3"],EXU1 = '|'(1:EXU2 2:EXU3)]] else [skip]]],[("Append",8)])),
((11), '|'(1:28 2:29)),
((12), Unbound),
((13), Unbound),
((1), Primitive Operation),
((2), Primitive Operation),
((3), Primitive Operation),
((4), Primitive Operation),
((5), Primitive Operation),
((6), Primitive Operation),
((7), Primitive Operation)

Mutable Store: Empty
Current Environment : ("Append" -> 8, "L1" -> 9, "L2" -> 10, "Out" -> 11, "Reverse" -> 12, "Out1" -> 13, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)
Stack : "Reverse = proc {$ Xs EXU1} [case Xs of nil() then [EXU1 = nil()] else [case Xs of '|'(1:X 2:Xr) then [local [\"EXU2\",\"EXU3\"] [local [\"EXU4\"] [EXU4 = Xr,\"Reverse\" \"EXU4\" \"EXU2\"],local [\"EXU4\"] [EXU4 = X,local [\"EXU5\",\"EXU6\"] [EXU5 = EXU4,EXU6 = nil(),EXU3 = '|'(1:EXU5 2:EXU6)]],\"Append\" \"EXU2\" \"EXU3\" \"EXU1\"]] else [skip]]]local [\"EXU1\"] [EXU1 = L1,\"Reverse\" \"EXU1\" \"Out1\"]skip/BOut1skip/f"

(After Reverse)

Out1 : [ 3  2  1 ]

Store : ((68, 70, 66, 42), '|'(1:61 2:62)),
((69, 55), nil()),
((67, 54, 53, 32, 16), 2),
((65, 57, 59, 45), '|'(1:54 2:55)),
((63, 56, 51, 50, 36, 18), 3),
((64), '|'(1:67 2:68)),
((61, 60, 28, 14), 1),
((62), nil()),
((58, 52), nil()),
((44, 48), '|'(1:51 2:52)),
((49, 38, 19), nil()),
((47), nil()),
((46, 34, 17), '|'(1:18 2:19)),
((43, 30, 15), '|'(1:16 2:17)),
((41), '|'(1:56 2:57)),
((40, 26, 9), '|'(1:14 2:15)),
((37, 39, 35, 31, 27, 10), '|'(1:20 2:21)),
((33), '|'(1:36 2:37)),
((29), '|'(1:32 2:33)),
((24), 6),
((25), nil()),
((22), 5),
((23), '|'(1:24 2:25)),
((20), 4),
((21), '|'(1:22 2:23)),
((8), proc(["Ls","Ms","EXU1"],[case Ls of nil() then [EXU1 = Ms] else [case Ls of '|'(1:X 2:Lr) then [local ["EXU2","EXU3"] [EXU2 = X,local ["EXU4","EXU5"] [EXU4 = Lr,EXU5 = Ms,"Append" "EXU4" "EXU5" "EXU3"],EXU1 = '|'(1:EXU2 2:EXU3)]] else [skip]]],[("Append",8)])),
((11), '|'(1:28 2:29)),
((12), proc(["Xs","EXU1"],[case Xs of nil() then [EXU1 = nil()] else [case Xs of '|'(1:X 2:Xr) then [local ["EXU2","EXU3"] [local ["EXU4"] [EXU4 = Xr,"Reverse" "EXU4" "EXU2"],local ["EXU4"] [EXU4 = X,local ["EXU5","EXU6"] [EXU5 = EXU4,EXU6 = nil(),EXU3 = '|'(1:EXU5 2:EXU6)]],"Append" "EXU2" "EXU3" "EXU1"]] else [skip]]],[("Reverse",12),("Append",8)])),
((13), '|'(1:63 2:64)),
((1), Primitive Operation),
((2), Primitive Operation),
((3), Primitive Operation),
((4), Primitive Operation),
((5), Primitive Operation),
((6), Primitive Operation),
((7), Primitive Operation)

Mutable Store: Empty
Current Environment : ("Append" -> 8, "L1" -> 9, "L2" -> 10, "Out" -> 11, "Reverse" -> 12, "Out1" -> 13, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)
Stack : ""


** Output from append.out **

[local ["Append","L1","L2","Out","Reverse","Out1"] [Append = proc {$ Ls Ms EXU1} [case Ls of nil() then [EXU1 = Ms] else [case Ls of '|'(1:X 2:Lr) then [local ["EXU2","EXU3"] [EXU2 = X,local ["EXU4","EXU5"] [EXU4 = Lr,EXU5 = Ms,"Append" "EXU4" "EXU5" "EXU3"],EXU1 = '|'(1:EXU2 2:EXU3)]] else [skip]]],local ["EXU1","EXU2"] [EXU1 = 1,local ["EXU3","EXU4"] [EXU3 = 2,local ["EXU5","EXU6"] [EXU5 = 3,EXU6 = nil(),EXU4 = '|'(1:EXU5 2:EXU6)],EXU2 = '|'(1:EXU3 2:EXU4)],L1 = '|'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = 4,local ["EXU3","EXU4"] [EXU3 = 5,local ["EXU5","EXU6"] [EXU5 = 6,EXU6 = nil(),EXU4 = '|'(1:EXU5 2:EXU6)],EXU2 = '|'(1:EXU3 2:EXU4)],L2 = '|'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = L1,EXU2 = L2,"Append" "EXU1" "EXU2" "Out"],skip/BOut,skip/f,Reverse = proc {$ Xs EXU1} [case Xs of nil() then [EXU1 = nil()] else [case Xs of '|'(1:X 2:Xr) then [local ["EXU2","EXU3"] [local ["EXU4"] [EXU4 = Xr,"Reverse" "EXU4" "EXU2"],local ["EXU4"] [EXU4 = X,local ["EXU5","EXU6"] [EXU5 = EXU4,EXU6 = nil(),EXU3 = '|'(1:EXU5 2:EXU6)]],"Append" "EXU2" "EXU3" "EXU1"]] else [skip]]],local ["EXU1"] [EXU1 = L1,"Reverse" "EXU1" "Out1"],skip/BOut1,skip/f]]



*/




