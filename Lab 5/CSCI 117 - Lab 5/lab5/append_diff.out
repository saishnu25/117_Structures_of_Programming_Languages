[local ["Reverse","L1","Out1"] [Reverse = proc {$ Xs EXU1} [local ["Y1","ReverseD"] [ReverseD = proc {$ Xs Y1 Y} [case Xs of nil() then [Y1 = Y] else [case Xs of '|'(1:X 2:Xr) then [local ["EXU2","EXU3","EXU4"] [EXU2 = Xr,EXU3 = Y1,local ["EXU5","EXU6"] [EXU5 = X,EXU6 = Y,EXU4 = '|'(1:EXU5 2:EXU6)],"ReverseD" "EXU2" "EXU3" "EXU4"]] else [skip]]],local ["EXU2","EXU3","EXU4"] [EXU2 = Xs,EXU3 = Y1,EXU4 = nil(),"ReverseD" "EXU2" "EXU3" "EXU4"],EXU1 = Y1]],local ["EXU1","EXU2"] [EXU1 = 1,local ["EXU3","EXU4"] [EXU3 = 2,local ["EXU5","EXU6"] [EXU5 = 3,local ["EXU7","EXU8"] [EXU7 = 4,EXU8 = nil(),EXU6 = '|'(1:EXU7 2:EXU8)],EXU4 = '|'(1:EXU5 2:EXU6)],EXU2 = '|'(1:EXU3 2:EXU4)],L1 = '|'(1:EXU1 2:EXU2)],local ["EXU1"] [EXU1 = L1,"Reverse" "EXU1" "Out1"],skip/BOut1,skip/f],local ["L1N","N","LNew","Reverse"] [N = nil(),Reverse = proc {$ Xs EXU1} [local ["ReverseD","Y1"] [ReverseD = proc {$ Xs Y1 Y} [case Xs of nil() then [Y1 = Y] else [case Xs of '|'(1:X 2:Xr) then [local ["Z"] [local ["EXU2","EXU3"] [EXU2 = X,EXU3 = Y,Z = '|'(1:EXU2 2:EXU3)],local ["EXU2","EXU3","EXU4"] [EXU2 = Xr,EXU3 = Y1,EXU4 = Z,"ReverseD" "EXU2" "EXU3" "EXU4"]]] else [skip]]],local ["EXU2","EXU3","EXU4"] [EXU2 = Xs,EXU3 = Y1,EXU4 = N,"ReverseD" "EXU2" "EXU3" "EXU4"],EXU1 = Y1]],local ["EXU1","EXU2"] [EXU1 = 1,local ["EXU3","EXU4"] [EXU3 = 2,local ["EXU5","EXU6"] [EXU5 = 3,local ["EXU7","EXU8"] [EXU7 = 4,EXU8 = nil(),EXU6 = '|'(1:EXU7 2:EXU8)],EXU4 = '|'(1:EXU5 2:EXU6)],EXU2 = '|'(1:EXU3 2:EXU4)],L1N = '|'(1:EXU1 2:EXU2)],local ["EXU1"] [EXU1 = L1N,"Reverse" "EXU1" "LNew"],skip/BLNew,skip/f]]